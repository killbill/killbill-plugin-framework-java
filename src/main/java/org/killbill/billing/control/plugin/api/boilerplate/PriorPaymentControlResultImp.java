/*
 *  Generated by https://github.com/killbill/api-pojos. Do not edit!
 *
 *  Copyright 2022-2022 The Billing Project, LLC
 *
 *  The Billing Project licenses this file to you under the Apache License,
 *  version 2.0 (the "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 *  License for the specific language governing permissions and limitations
 *  under the License.
 */

package org.killbill.billing.control.plugin.api.boilerplate;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;
import org.killbill.billing.catalog.api.Currency;
import org.killbill.billing.control.plugin.api.PriorPaymentControlResult;
import org.killbill.billing.payment.api.PluginProperty;

@JsonDeserialize( builder = PriorPaymentControlResultImp.Builder.class )
public class PriorPaymentControlResultImp implements PriorPaymentControlResult {

    protected BigDecimal adjustedAmount;
    protected Currency adjustedCurrency;
    protected UUID adjustedPaymentMethodId;
    protected String adjustedPluginName;
    protected Iterable<PluginProperty> adjustedPluginProperties;
    protected boolean isAborted;

    public PriorPaymentControlResultImp(final PriorPaymentControlResultImp that) {
        this.adjustedAmount = that.adjustedAmount;
        this.adjustedCurrency = that.adjustedCurrency;
        this.adjustedPaymentMethodId = that.adjustedPaymentMethodId;
        this.adjustedPluginName = that.adjustedPluginName;
        this.adjustedPluginProperties = that.adjustedPluginProperties;
        this.isAborted = that.isAborted;
    }
    protected PriorPaymentControlResultImp(final PriorPaymentControlResultImp.Builder<?> builder) {
        this.adjustedAmount = builder.adjustedAmount;
        this.adjustedCurrency = builder.adjustedCurrency;
        this.adjustedPaymentMethodId = builder.adjustedPaymentMethodId;
        this.adjustedPluginName = builder.adjustedPluginName;
        this.adjustedPluginProperties = builder.adjustedPluginProperties;
        this.isAborted = builder.isAborted;
    }
    protected PriorPaymentControlResultImp() { }
    @Override
    public BigDecimal getAdjustedAmount() {
        return this.adjustedAmount;
    }
    @Override
    public Currency getAdjustedCurrency() {
        return this.adjustedCurrency;
    }
    @Override
    public UUID getAdjustedPaymentMethodId() {
        return this.adjustedPaymentMethodId;
    }
    @Override
    public String getAdjustedPluginName() {
        return this.adjustedPluginName;
    }
    @Override
    public Iterable<PluginProperty> getAdjustedPluginProperties() {
        return this.adjustedPluginProperties;
    }
    @Override
    @JsonGetter("isAborted")
    public boolean isAborted() {
        return this.isAborted;
    }
    @Override
    public boolean equals(final Object o) {
        if ( this == o ) {
            return true;
        }
        if ( ( o == null ) || ( this.getClass() != o.getClass() ) ) {
            return false;
        }
        final PriorPaymentControlResultImp that = (PriorPaymentControlResultImp) o;
        if( ( this.adjustedAmount != null ) ? ( 0 != this.adjustedAmount.compareTo(that.adjustedAmount) ) : ( that.adjustedAmount != null ) ) {
            return false;
        }
        if( !Objects.equals(this.adjustedCurrency, that.adjustedCurrency) ) {
            return false;
        }
        if( !Objects.equals(this.adjustedPaymentMethodId, that.adjustedPaymentMethodId) ) {
            return false;
        }
        if( !Objects.equals(this.adjustedPluginName, that.adjustedPluginName) ) {
            return false;
        }
        if( !Objects.equals(this.adjustedPluginProperties, that.adjustedPluginProperties) ) {
            return false;
        }
        if( this.isAborted != that.isAborted ) {
            return false;
        }
        return true;
    }
    @Override
    public int hashCode() {
        int result = 1;
        result = ( 31 * result ) + Objects.hashCode(this.adjustedAmount);
        result = ( 31 * result ) + Objects.hashCode(this.adjustedCurrency);
        result = ( 31 * result ) + Objects.hashCode(this.adjustedPaymentMethodId);
        result = ( 31 * result ) + Objects.hashCode(this.adjustedPluginName);
        result = ( 31 * result ) + Objects.hashCode(this.adjustedPluginProperties);
        result = ( 31 * result ) + Objects.hashCode(this.isAborted);
        return result;
    }
    @Override
    public String toString() {
        final StringBuffer sb = new StringBuffer(this.getClass().getSimpleName());
        sb.append("{");
        sb.append("adjustedAmount=").append(this.adjustedAmount);
        sb.append(", ");
        sb.append("adjustedCurrency=").append(this.adjustedCurrency);
        sb.append(", ");
        sb.append("adjustedPaymentMethodId=").append(this.adjustedPaymentMethodId);
        sb.append(", ");
        sb.append("adjustedPluginName=");
        if( this.adjustedPluginName == null ) {
            sb.append(this.adjustedPluginName);
        }else{
            sb.append("'").append(this.adjustedPluginName).append("'");
        }
        sb.append(", ");
        sb.append("adjustedPluginProperties=").append(this.adjustedPluginProperties);
        sb.append(", ");
        sb.append("isAborted=").append(this.isAborted);
        sb.append("}");
        return sb.toString();
    }

    @SuppressWarnings("unchecked")
    public static class Builder<T extends PriorPaymentControlResultImp.Builder<T>> {

        protected BigDecimal adjustedAmount;
        protected Currency adjustedCurrency;
        protected UUID adjustedPaymentMethodId;
        protected String adjustedPluginName;
        protected Iterable<PluginProperty> adjustedPluginProperties;
        protected boolean isAborted;

        public Builder() { }
        public Builder(final Builder that) {
            this.adjustedAmount = that.adjustedAmount;
            this.adjustedCurrency = that.adjustedCurrency;
            this.adjustedPaymentMethodId = that.adjustedPaymentMethodId;
            this.adjustedPluginName = that.adjustedPluginName;
            this.adjustedPluginProperties = that.adjustedPluginProperties;
            this.isAborted = that.isAborted;
        }
        public T withAdjustedAmount(final BigDecimal adjustedAmount) {
            this.adjustedAmount = adjustedAmount;
            return (T) this;
        }
        public T withAdjustedCurrency(final Currency adjustedCurrency) {
            this.adjustedCurrency = adjustedCurrency;
            return (T) this;
        }
        public T withAdjustedPaymentMethodId(final UUID adjustedPaymentMethodId) {
            this.adjustedPaymentMethodId = adjustedPaymentMethodId;
            return (T) this;
        }
        public T withAdjustedPluginName(final String adjustedPluginName) {
            this.adjustedPluginName = adjustedPluginName;
            return (T) this;
        }
        public T withAdjustedPluginProperties(final Iterable<PluginProperty> adjustedPluginProperties) {
            this.adjustedPluginProperties = adjustedPluginProperties;
            return (T) this;
        }
        public T withIsAborted(final boolean isAborted) {
            this.isAborted = isAborted;
            return (T) this;
        }
        public T source(final PriorPaymentControlResult that) {
            this.adjustedAmount = that.getAdjustedAmount();
            this.adjustedCurrency = that.getAdjustedCurrency();
            this.adjustedPaymentMethodId = that.getAdjustedPaymentMethodId();
            this.adjustedPluginName = that.getAdjustedPluginName();
            this.adjustedPluginProperties = that.getAdjustedPluginProperties();
            this.isAborted = that.isAborted();
            return (T) this;
        }
        protected Builder validate() {
          return this;
        }
        public PriorPaymentControlResultImp build() {
            return new PriorPaymentControlResultImp(this.validate());
        }
    }
}
